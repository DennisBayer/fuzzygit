#!/usr/bin/env bash
#   __                           _ _
#  / _|_   _ _________   _  __ _(_) |_
# | |_| | | |_  /_  / | | |/ _` | | __|
# |  _| |_| |/ / / /| |_| | (_| | | |_
# |_|  \__,_/___/___|\__, |\__, |_|\__|
#                    |___/ |___/
#
# fuzzygit - marry git and fzf
#

# shellcheck source=/dev/null
[[ -f "${XDG_CONFIG_HOME}/fuzzygit/config" ]] && . "${XDG_CONFIG_HOME}/fuzzygit/config"

# Fuzzygit config
FG_IS_ECHO_STATUS=${FUZZYGIT_IS_ECHO_STATUS:-true}
FG_GIT_LOG_PRETTY_FORMAT="--pretty=format:%h - "${FUZZYGIT_GIT_LOG_PRETTY_FORMAT:-"(%ar) %C(bold)%s%C(reset) - %aN%d"}

# Git config
FG_VAR_GIT_PAGER=$(git config core.pager)
FG_VAR_PREVIEW_GIT_LOG_OPTS=("${FUZZYGIT_PREVIEW_GIT_LOG_OPTS:-"--stat"}")

# -----------------------------------------------------------------------------
# Utility functions
# -----------------------------------------------------------------------------

fg_isGitRepo() {
  git rev-parse HEAD >/dev/null 2>&1
}

fg_echo() {
  [ "${FG_IS_ECHO_STATUS}" != true ] && return 0

  if [[ "${#}" -ne 0 ]]; then
    printf "%s\n" "${@}"
  fi
}

fg_header() {
  printf "
    \e[1m%s\e[0m 
    \t%s
  " "${1}" "${2}"
}

#
# Strip the three leading characters ("?? <item>") and if ' -> ' is contained
# keep the part afterwards only.
#
FG_GIT_STATUS_PATTERN='s/^...//; s/.*->.//; s/\"//g'

#
# Strip the two leading spaces ("* <branch>")
#
FG_GIT_SWITCH_PATTERN='s/^..//'

# -----------------------------------------------------------------------------
# fzf functions
# -----------------------------------------------------------------------------

fg_fzf() {
  fzf --cycle --layout=reverse --multi "${@}"
}

fg_fzf_single() {
  fzf --cycle --layout=reverse --no-multi "${@}"
}

# -----------------------------------------------------------------------------
# fuzzygit functions
# -----------------------------------------------------------------------------

#
# Main function.
#
# The first argument refers to the function which should be invoked, e.g.
# `fg add` will call `fg_add`.
# The remaining arguments are passed to the calling function, e.g.
# `fg hash git show` will call `fg_hash git show`.
#
fuzzygit() {
  [[ "${#}" -eq 0 || "${#}" -eq 1 && "${1}" == "--help" ]] && {
    fg_help
    return 0
  }

  fg_isGitRepo || {
    echo "No git repository found."
    return 1
  }

  if [[ "${#}" -ne 0 ]]; then
    fg_"${1}" "${@:2:(${#} - 1)}"
  else
    fg_help
  fi
}

#
# Shows a list of local branches and switches to the selected one.
#
# Passed arguments are added to the branch listing,
# e.g. `-r` will list remote branches.
#
fg_switch() {
  fg_isGitRepo || return 1

  local preview header item

  # get log of branches
  preview="git log '${FG_GIT_LOG_PRETTY_FORMAT}' {1}"

  header="$(fg_header \
    "git switch <selected branch>" \
    "Switch or checkout the branch.")"

  item="$(git branch "${@:-"-v"}" |
    fg_fzf_single --preview="${preview}" --header="${header}")"

  # switch to branch if any
  if [[ -n "${item}" ]]; then
    echo "${item}" |
    awk -F '([[:space:]]{2}|[[:space:]]*)' '{print $2}' |
    xargs -I %branch git switch %branch
  else
    fg_echo "No branch has been selected."
  fi
}

#
# Shows a list of addable files and adds them to the staging area.
#
fg_add() {
  fg_isGitRepo || return 1

  local preview header items

  # check if file is untracked; show pager in preview accordingly
  preview="
    if (git status -s -- {2..} | grep '^??') &>/dev/null; then
      # diff with /dev/null for untracked files
      git diff --no-index -- /dev/null {2..} | ${FG_VAR_GIT_PAGER}
    elif (git status -s -- {2..} | grep '^[M|A][[:space:]]'); then
      git diff --staged -- '{2..}' | ${FG_VAR_GIT_PAGER}
    elif (\$(git status -s -- {2..})) &>/dev/null; then
      # diff new name of renamed and modified files
      git diff --staged -- '{-1}'
    else
      git diff -- '{2..}' | ${FG_VAR_GIT_PAGER}
    fi"

  header="$(fg_header \
    "git add -- <selected items>" \
    "Adds items to the staging area.")"

  # get parsable status; show preview and limit search to second block
  items="$(git status -su |
    grep -v -E '^[MARCD][[:space:]]' |
    fg_fzf --nth 2..,.. --preview="${preview}" --header="${header}" |
    sed "${FG_GIT_STATUS_PATTERN}")"

  # add files if any
  if [[ -n "${items}" ]]; then
    #  add selected files to staging area; add single quote to escape whitespaces in file names
    echo "${items}" | xargs -t -I %itemsToAdd git add -- '%itemsToAdd'
  else
    fg_echo "No files have been selected."
  fi
}

#
# Shows the list of files which are in the staging area (aka added files)
# and puts them back into the working area.
#
fg_unstage() {
  fg_isGitRepo || return 1

  local preview header items

  # show diff in pager
  preview="git diff --staged -- '{2..}' | ${FG_VAR_GIT_PAGER}"

  header="$(fg_header \
    "git restore --staged -- <selected items>" \
    "Removes items from the staging area.")"

  # get parsable status; show preview and limit search to second block
  items="$(git status -s -uno |
    grep -E "^[MARCD][[:space:]]?" |
    fg_fzf --nth 2..,.. --preview="${preview}" --header="${header}" |
    sed "${FG_GIT_STATUS_PATTERN}")"

  # add files if any
  if [[ -n "${items}" ]]; then
    #  remove selected files from staging area; add single quote to escape whitespaces in file names
    echo "${items}" | xargs -t -I %itemsToUnstage git restore --staged -- '%itemsToUnstage'
  else
    fg_echo "No files have been selected."
  fi
}

#
# Show the list of files in the working area (aka modified files)
# and restores the version from the local repository.
#
fg_restore() {
  fg_isGitRepo || return 1

  local preview header items

  # show diff in pager
  preview="git diff -- '{2..}' | ${FG_VAR_GIT_PAGER}"

  header="$(fg_header \
    "git restore -- <selected items>" \
    "Restores items from local repository.")"

  # get parsable status; show preview and limit search to second block
  items="$(git status -s -uno |
    grep -E "^([MARCD]|[[:space:]])[MARCD]" |
    fg_fzf --nth 2..,.. --preview="${preview}" --header="${header}" |
    sed "${FG_GIT_STATUS_PATTERN}")"

  # add files if any
  if [[ -n "${items}" ]]; then
    #  restore selected files from working directory; add single quote to escape whitespaces in file names
    echo "${items}" | xargs -t -I %itemsToRestore git restore -- '%itemsToRestore'
  else
    fg_echo "No files have been selected."
  fi
}

#
# Shows the commit history and shows the log between the selected one and the HEAD.
#
fg_log() {
  fg_isGitRepo || return 1

  local preview header item

  preview="git log -1 ${*:-${FG_VAR_PREVIEW_GIT_LOG_OPTS[*]}} {1}"

  header="$(fg_header \
    "git log --stat <selected commit>^..HEAD" \
    "Shows the log starting with the selected commit up until HEAD.")"

  item="$(git log "${FG_GIT_LOG_PRETTY_FORMAT}" |
    fg_fzf_single --preview="${preview}" --header="${header}")"

  # show the commit log between the selected commit and the current head
  if [[ -n "${item}" ]]; then
    # shellcheck disable=SC2068
    echo "${item}" | awk '{print $1}' | xargs -t -I %commitHash% git log ${@:-${FG_VAR_PREVIEW_GIT_LOG_OPTS[@]}} %commitHash%^..HEAD
  else
    fg_echo "No commit has been selected."
  fi
}

#
# Shows the files of the current branch and the detailed log for the selected item.
#
fg_flog() {
  fg_isGitRepo || return 1

  local preview header item

  preview="git log ${*:-${FG_VAR_PREVIEW_GIT_LOG_OPTS[*]}} -- {1}"

  header="$(fg_header \
    "git log <selected item>" \
    "Shows the log of the selected item.")"

  item="$(git ls-tree -r --name-only "$(git branch --show-current)" |
    fg_fzf_single --preview="${preview}" --header="${header}")"

  if [[ -n "${item}" ]]; then
    # shellcheck disable=SC2068
    echo "${item}" | xargs -t -I %item git log ${@:-${FG_VAR_PREVIEW_GIT_LOG_OPTS[@]}} -- %item
  else
    fg_echo "No item has been selected."
  fi
}

#
# Shows the commit history and passes the hashes of the selected entries
# to the command which was given as an argument.
#
fg_hash() {
  fg_isGitRepo || return 1

  local preview header items

  # As for now no log opts can be passed externally, because hash uses arguments
  # to control execution.
  preview="git log -1 ${FG_VAR_PREVIEW_GIT_LOG_OPTS[*]} {1}"

  header="$(fg_header \
    "$* <selected commit>" \
    "Passes the selected commit to to the given command.")"

  items="$(git log "${FG_GIT_LOG_PRETTY_FORMAT}" |
    fg_fzf --preview="${preview}" --header="${header}")"

  # pass the selected commit hashes to the argument, e.g. "fg_hash git show"
  if [[ -n "${items}" ]]; then
    echo "${items}" | awk '{print $1}' | xargs -t -I %commitHash% "${@}" %commitHash%
  else
    fg_echo "No commit has been selected."
  fi
}

#
# Cherry picks the commits from the given branch into the current one.
#
fg_cherry() {
  fg_isGitRepo || return 1
  [[ "${#}" -lt 1 ]] && fg_echo "No branch to show log for has been given." && return 1

  local branch preview header items

  branch=${1}
  shift

  preview="git log -1 ${*:-${FG_VAR_PREVIEW_GIT_LOG_OPTS[*]}} {1}"

  header="$(fg_header \
    "git cherry-pick -x <selected commits>" \
    "Cherry picks the selected commits.")"

  items="$(git log "${branch}" "${FG_GIT_LOG_PRETTY_FORMAT}" |
    fg_fzf --preview="${preview}" --header="${header}")"

  if [[ -n "${items}" ]]; then
    echo "${items}" | awk '{print $1}' | tac | xargs -t -I %commitHash% git cherry-pick -x %commitHash%
  else
    fg_echo "No commit has been selected."
  fi
}

#
# Lists branches which either contain another branch or which do not contain a
# certain commit.
#
# The command must be followed by an action: "contains", "no-merged"
#
fg_branch() {
  fg_isGitRepo || return 1
  [[ "${#}" -lt 1 ]] && fg_echo "No action given." && return 1

  local action preview header item rev

  action="${1}"
  shift

  case "${action}" in
    "contains")
      # get log of branches
      preview="git log '${FG_GIT_LOG_PRETTY_FORMAT}' {1}"

      header="$(fg_header \
        "git branch --contains <selected branch>" \
        "Lists the branches which contain the head commit of the selected branch.")"

      item="$(git branch "${@:-"-l"}" |
        fg_fzf_single --preview="${preview}" --header="${header}" |
        sed "${FG_GIT_SWITCH_PATTERN}")"

      if [[ -n "${item}" ]]; then
        rev=$(git rev-parse "${item}")
      fi
      ;;

    "no-merged")
      preview="git log -1 ${*:-${FG_VAR_PREVIEW_GIT_LOG_OPTS[*]}} {1}"

      header="$(fg_header \
        "git branch --no-merged <selected commit>" \
        "Lists the branches which does not contain the selected commit.")"

      item="$(git log "${FG_GIT_LOG_PRETTY_FORMAT}" |
        fg_fzf_single --preview="${preview}" --header="${header}")"

      if [[ -n "${item}" ]]; then
        rev=$(echo "${item}" | awk '{print $1}')
      fi
      ;;
  esac

  echo "git branch --${action} ${rev}"

  if [[ -n "${rev}" ]]; then
    git branch --"${action}" "${rev}"
  else
    fg_echo "No commit has been selected."
  fi
}

# -----------------------------------------------------------------------------
# Command Line Completions
# -----------------------------------------------------------------------------

FG_COMPLETION_WORDS=("add" "branch" "cherry" "flog" "hash" "log" "restore" "switch" "unstage")

_fg_completions_bash() {
  local IFS=$' \t\n'

  if [[ "${#COMP_WORDS[@]}" -ne "2" ]]; then
    return
  fi

  # shellcheck disable=SC2207
  COMPREPLY=($(compgen -o default -W "${FG_COMPLETION_WORDS[*]}" -- "${COMP_WORDS[1]}"))
}

[[ -n "${BASH}" ]] && complete -F _fg_completions_bash fuzzygit

_fg_completions_zsh() {
  if [[ "${CURRENT}" -ne "2" ]]; then
    return
  fi

  compadd -a FG_COMPLETION_WORDS
}

[[ -n "${ZSH_NAME}" ]] && compdef _fg_completions_zsh fuzzygit

#
# Prints a help summary.
#
fg_help() {
  printf "%s\n\n" "Usage: fuzzygit <function> [<args..>]"

  local fuzzygitUsage="fuzzygit <function> [<args..>]
    Invokes one of the functions, if an argument is passed.
    E.g. 'fuzzygit add' or 'fuzzygit hash git show'"
  printf "  %s\n\n" "${fuzzygitUsage}"

  printf "\n%s\n\n" "Functions:"

  local addUsage="add
    Shows a list of files which can be added to the staging area."
  printf "  %s\n\n" "${addUsage}"

  local branchUsage="branch (contains | no-merged)
    Lists branches which either contain another branch or which do not contain a
    certain commit. The desired action is passed as an argument."
  printf "  %s\n\n" "${branchUsage}"

  local cherryUsage="cherry <branch name> [<git log option>...]
    Cherry picks the selected commits from the given branch and the HEAD. The
    first parameter _must_ be a branch name."
  printf "  %s\n\n" "${cherryUsage}"

  local flogUsage="flog [<git log option>...]
    Lists all items of the git tree and shows the log of the selected item."
  printf "  %s\n\n" "${flogUsage}"

  local hashUsage="hash <command for hash>
    Shows the commit history and passes the hashes of the selected entries to
    the command which was given as an argument. E.g. to get detailed information
    about a commit use 'fuzzygit hash git show'."
  printf "  %s\n\n" "${hashUsage}"

  local logUsage="log [<git log option>...]
    Shows the commit history and shows the log between the selected one and the
    HEAD."
  printf "  %s\n\n" "${logUsage}"

  local unstageUsage="unstage
    Shows the list of files which are in the staging area (aka added files) and
    puts them back into the working area."
  printf "  %s\n\n" "${unstageUsage}"

  local restoreUsage="restore
    Shows the list of files in the working area (aka modified files) and
    restores the version from the local repository."
  printf "  %s\n\n" "${restoreUsage}"

  local switchUsage="switch [-r]
    Shows a list of branches and switches to the selected one.
    By default only local branches are shown. To get a list of remote branches,
    pass '-r' as an argument."
  printf "  %s\n\n" "${switchUsage}"

  printf "\n%s\n\n" "Environment Variables:
    (Config file '\${XDG_CONFIG_HOME}/fuzzygit/config' will be respected.)"

  local envVarEcho="FUZZYGIT_IS_ECHO_STATUS=(true|false) - [default: true]
    Toggle fuzzygit status infos."
  printf "  %s\n\n" "${envVarEcho}"

  local envVarPreviewGitLog="FUZZYGIT_PREVIEW_GIT_LOG_OPTS - [default: --stat]
    Set the options which are passed to 'git log' when it is used in a preview
    environment."
  printf "  %s\n\n" "${envVarPreviewGitLog}"

  local envVarLogPretty="FUZZYGIT_GIT_LOG_PRETTY_FORMAT - 
    [default: --pretty=format:%h - (%ar) %C(bold)%s%C(reset) - %aN%d]
    Set the pretty format to use when 'git log' is used in list of available
    items."
  printf "  %s\n\n" "${envVarLogPretty}"

  printf "%s\n\n" "For further information see README.md or visit:
    <https://github.com/DennisBayer/fuzzygit>"
}
